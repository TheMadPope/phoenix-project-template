#!/bin/bash
####################################################################################################
#
# FILENAME:     uninstall-pkg-from-sandbox
#
# PURPOSE:      Uninstalls a 04t package from an org
#
# INSTRUCTIONS: Execute the following command relative to your project's root directory:  
#               ./dev-tools/uninstall-pkg-from-sandbox [package id] [org alias]
#
#### LOAD SHARED FUNCTIONS LIBRARY #################################################################
# Make sure that the shared-functions.sh script exists.
# Start from the current directory
current_dir=$(realpath .)

# Look for the "dev-tools" directory by traversing up the directory structure
while [[ "$current_dir" != "/" ]]; do
  if [[ -d "$current_dir/dev-tools" ]]; then
    root_dir="$current_dir/dev-tools"
    break
  fi
  current_dir=$(dirname "$current_dir")
done

# Check if the "dev-tools" directory was found
if [[ -z "$root_dir" ]]; then
  echo "FATAL ERROR: `tput sgr0``tput setaf 1`Could not find the dev-tools directory."
  exit 1
fi

# Now you can use "$root_dir" as the root directory
lib_path="$root_dir/lib/shared-functions.sh"
if [[ ! -r "$lib_path" ]]; then
  echo "FATAL ERROR: `tput sgr0``tput setaf 1`Could not load $lib_path. File not found."
  exit 1
fi

# Load the shared-functions.sh library.  This action will also cause the
# config variables from dev-tools/lib/local-config.sh to be loaded.
source "$lib_path"

package_id=$1
if [ -z "$package_id" ]; then
  echo_text_error "The Package Id and Org Alias must be provided, like so:"
  echo "./dev-tools/uninstall-pkg-from-sandbox [package id] [org alias]"
  exit 0
fi

org_alias=$2
if [ -z "$org_alias" ]; then
  echo_text_error "The Package Id and Org Alias must be provided, like so:"
  echo "./dev-tools/uninstall-pkg-from-sandbox [package id] [org alias]"
  exit 0
fi

#### CONFIRM SCRIPT EXECUTION ######################################################################
confirmScriptExecution "Do you want to UNINSTALL PackageId $package_id from the $org_alias org?"

#### CREATE LOCAL VARIABLES ########################################################################
# No local variables are used by this script.

#### UNINSTALL PACKAGE #############################################################################
#### 0. Reset the Step Message counter and set the TOTAL STEPS to 2.
resetStepMsgCounter 2

#### 1. Attempt to uninstall the specified package from the target subscriber sandbox org.
echoStepMsg "Attempt to uninstall package $package_id from the org aliased as $org_alias"
command="sf package uninstall --package $package_id --target-org $org_alias --wait 15"
echo "Executing: $command"
(cd $PROJECT_ROOT && exec $command)

# Check if the previous command executed successfully. If not, abort this script.
if [ $? -ne 0 ]; then
  echoErrorMsg "Package removal from $SUBSCRIBER_SANDBOX_ALIAS was not successful."
fi

#### 2. List all of the packages installed in the target subscriber org.
echoStepMsg "List all packages that remain in $SUBSCRIBER_SANDBOX_ALIAS"
echo "List of packages currently installed in $SUBSCRIBER_SANDBOX_ALIAS.\n"
(cd $PROJECT_ROOT && exec sf package installed list --target-org $org_alias)

#### ECHO CLOSING SUCCESS MESSAGE ##################################################################
echoScriptCompleteMsg "Package removal script complete"

##END##
